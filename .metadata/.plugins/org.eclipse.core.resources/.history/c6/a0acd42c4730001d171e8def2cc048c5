package com.bridgelabz.fundooadminmicroservice.controller;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;

import org.springframework.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.bridgelabz.fundooadminmicroservice.dto.FundooUserDTO;
import com.bridgelabz.fundooadminmicroservice.model.FundooUserModel;
import com.bridgelabz.fundooadminmicroservice.service.IFundooUserService;
import com.bridgelabz.fundooadminmicroservice.util.ResponseClass;

import io.swagger.v3.oas.annotations.parameters.RequestBody;

/**
 * Purpose:Creating APIS for user Controller
 * @author Manoj
 * @Param Http METHODS
 * Version 1.0
 */
@RestController
@RequestMapping("/user")
public class FundooUserController {
	
	@Autowired
	IFundooUserService iFundooUserService;
	
    /**
     * Purpose:Creating method to add user
     * @author Manoj
     * @Param AdminDto
     */
    @PostMapping("/createUser")
    public ResponseEntity<ResponseClass> createUser(@RequestBody @Valid FundooUserDTO fundooUserDTO){
    	ResponseClass responseClass = iFundooUserService.createUser(fundooUserDTO);
    	return new ResponseEntity<>(responseClass, HttpStatus.OK);
    }
    
    /**
     * Purpose:Creating method to Update user
     * @author Manoj
     * @Param AdminDto ,id ,token
     */
    @PutMapping("/updateUser/{userId}")
    public ResponseEntity<ResponseClass> updateUser(@RequestHeader String token,@PathVariable @NotBlank  Long userId,@RequestParam @NotBlank String name,@RequestParam @NotBlank String email
    		,@RequestParam  @NotBlank String phoneNumber,@RequestParam @NotBlank String dateOfBirth,@RequestParam @NotBlank Boolean isActive){
    	ResponseClass responseClass = iFundooUserService.updateUser(token,userId,name,email,phoneNumber,dateOfBirth,isActive);
    	return new ResponseEntity<>(responseClass, HttpStatus.OK);
    }
    
    /**
     * Purpose:Creating method to get List of user
     * @author Manoj
     * @Param  token
     */
    @GetMapping("/adminList")
    public ResponseEntity<List<?>> getList (@RequestHeader String token){
    	List<FundooUserModel> responseClass = iFundooUserService.getList(token);
    	return new ResponseEntity<>(responseClass, HttpStatus.OK);
    }
    
    /**
     * Purpose:Creating method to Delete user
     * @author Manoj
     * @Param  token,id
     */
    @DeleteMapping("/deleteAdmin/{userId}")
    public ResponseEntity<ResponseClass> deleteUser(@RequestHeader String token,@PathVariable   Long userId){
        ResponseClass responseClass = iFundooUserService.deleteUser(token,userId);
        return new ResponseEntity<>(responseClass, HttpStatus.OK);
    }
    
    /**
     * Purpose:Creating method to retrieve user
     * @author Manoj
     * @Param  token,id
     */
    @PostMapping("/retrieveUser")
    public ResponseEntity<ResponseClass> retrieveUser(@)
    
}
