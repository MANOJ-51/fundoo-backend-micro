package com.bridgelabz.fundooadminmicroservice.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.bridgelabz.fundooadminmicroservice.dto.FundooUserDTO;
import com.bridgelabz.fundooadminmicroservice.exceptions.CustomExceptions;
import com.bridgelabz.fundooadminmicroservice.model.FundooUserModel;
import com.bridgelabz.fundooadminmicroservice.repository.IFundooUserRepository;
import com.bridgelabz.fundooadminmicroservice.repository.TrashRepository;
import com.bridgelabz.fundooadminmicroservice.util.ResponseClass;
import com.bridgelabz.fundooadminmicroservice.util.TokenUtill;

/**
 * Purpose:Creating Service for Admin
 * @author Manoj
 * @Param business logic is present here
 * Version 1.0
 */
@Service
public class FundooUserService implements IFundooUserService {
	
	@Autowired
	IFundooUserRepository iFundooUserRepository;
	
	@Autowired
	TrashRepository trashRepository;
	
	@Autowired
	TokenUtill tokenUtill;
	
	@Autowired
	MailService mailService;

	 /**
     * Purpose:Creating method to add user
     * @author Manoj
     * @Param AdminDto
     */
	@Override
	public ResponseClass createUser(@Valid FundooUserDTO fundooUserDTO) {
		FundooUserModel fundooUserModel = new FundooUserModel(fundooUserDTO);
		fundooUserModel.setCreatedAt(LocalDateTime.now());
		iFundooUserRepository.save(fundooUserModel);
		String body = "User Registration Is Successful with id :-"+fundooUserModel.getId()+"\n"+fundooUserModel;
	    String subject = "User Registration Success";
	    mailService.send(fundooUserModel.getEmail(), body,subject);
		return new ResponseClass(200,"success",fundooUserModel);
	}

    /**
     * Purpose:Creating method to Update user
     * @author Manoj
     * @Param AdminDto ,id ,token
     */
	@Override
	public ResponseClass updateUser(String token, Long userId, @Valid FundooUserDTO fundooUserDTO) {
		Long usersId = tokenUtill.decodeToken(token);
		Optional<FundooUserModel> isUserIdPresent = iFundooUserRepository.findById(usersId);
		if (isUserIdPresent.isPresent()) {
			Optional<FundooUserModel> isUserPresent = iFundooUserRepository.findById(userId);
			if (isUserPresent.isPresent()) {
				isUserPresent.get().setName(fundooUserDTO.getName());
				isUserPresent.get().setEmail(fundooUserDTO.getEmail());
				isUserPresent.get().setPassword(fundooUserDTO.getPassword());
				isUserPresent.get().setDateOfBirth(fundooUserDTO.getDateOfBirth());
				isUserPresent.get().setIsActive(fundooUserDTO.getIsActive());
				isUserPresent.get().setPhoneNumber(fundooUserDTO.getPhoneNumber());
				isUserPresent.get().setUpdatedAt(LocalDateTime.now());
				iFundooUserRepository.save(isUserPresent.get());
				String body = "User Update Is Successful with id :-"+isUserPresent.get().getId()+"\n"+isUserPresent.get();
			    String subject = "User Update Success";
			    mailService.send(isUserPresent.get().getEmail(), body,subject);
			    return new ResponseClass(200,"success",isUserPresent.get());
			}
		}
		throw new CustomExceptions(400,"User Not Found");
	}

    /**
     * Purpose:Creating method to getList
     * @author Manoj
     * @Param AdminDto ,id ,token
     */
	@Override
	public List<FundooUserModel> getList(String token) {
		Long usersId = tokenUtill.decodeToken(token);
		Optional<FundooUserModel>isUserIdPresent = iFundooUserRepository.findById(usersId);
		if(isUserIdPresent.isPresent()) {
			List<FundooUserModel>getData =iFundooUserRepository.findAll();
			if (getData.size()>0) {
				return getData;
			}
		}
		throw new CustomExceptions(400,"User Not Found");
	}

}
